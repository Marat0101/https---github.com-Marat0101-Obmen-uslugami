{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { deleteServiceApi, getServiceByIdApi } from '@/services/services_service';\nimport store from '@/store';\nimport AppImage from '@/components/UI/AppImage.vue';\nimport { getImageUrl } from '@/hooks/imageUrl';\nimport AppRadio from '@/components/UI/AppRadio.vue';\nimport AppPrimaryBtn from '@/components/UI/AppPrimaryButton.vue';\nimport { getCreatorId } from '@/hooks/getServiceCreatorId';\nimport AppTabs from '@/components/UI/AppTabs.vue';\nimport { createPlanApi, deletePlanApi, getCurrentEntriesApi, getFreeWindowsApi, signUpPlanApi, updatePlanApi } from '@/services/plans_service';\nimport AppDialog from '@/components/UI/AppDialog.vue';\nimport AppForm from '@/components/AppForm.vue';\nimport InputRows from '@/components/UI/InputRows.vue';\n// import VueDatePicker from '@vuepic/vue-datepicker'\nimport '@vuepic/vue-datepicker/dist/main.css';\nimport AppDatePicker from '@/components/UI/AppDateInput.vue';\nimport AppTimePicker from '@/components/UI/AppTimeInput.vue';\nimport { currentDate } from '@/hooks/currentDate';\nimport { currentTime } from '@/hooks/currentTime';\nimport { roundTime } from '@/hooks/roundTime';\nimport PlanList from '@/components/plans/Planslist.vue';\nimport router from '@/router/router';\nimport AppRedBtn from '@/components/UI/AppRedButton.vue';\nimport { dateToString } from '../../hooks/dateToString';\nexport default {\n  components: {\n    AppRedBtn,\n    PlanList,\n    AppTimePicker,\n    AppDatePicker,\n    InputRows,\n    AppForm,\n    AppDialog,\n    AppTabs,\n    AppPrimaryBtn,\n    AppRadio,\n    AppImage\n  },\n  data() {\n    return {\n      service: {\n        image: String,\n        createdAt: Date,\n        updatedAt: Date,\n        places: String,\n        category: Object,\n        duration: String,\n        title: String,\n        cost: String,\n        description: String,\n        author: {\n          name: String,\n          avatar: String\n        }\n      },\n      isLoaded: false,\n      selectedWindowId: '',\n      creatorId: 0,\n      planTabs: [{\n        name: 'freeWindows',\n        label: 'Свободные окна'\n      }, {\n        name: 'currentEntries',\n        label: 'Текущие записи'\n      }],\n      selectedTab: {\n        name: 'freeWindows',\n        label: 'Свободные окна'\n      },\n      freeWindows: [],\n      currentEntries: [],\n      planDate: '',\n      planTime: '',\n      dialogVisibleCreate: false,\n      dialogVisibleEdit: false,\n      editForm: {\n        planDateNew: '',\n        planTimeNew: '',\n        editedPlan: ''\n      }\n    };\n  },\n  mounted() {\n    this.fetchServiceById();\n    console.log(this.service);\n    this.setCreatorId();\n    this.fetchFreeWindows();\n  },\n  computed: {\n    currentDate() {\n      return currentDate;\n    },\n    currentRoundedTime() {\n      return roundTime(currentTime);\n    },\n    serviceId() {\n      return Number(this.$route.params.id);\n    },\n    hasAllRights() {\n      return store.getters['auth/getLoggedIn'] && (store.getters['auth/getUserProfile'].id === this.creatorId || store.getters['auth/getUserProfile'].role === 'Admin');\n    },\n    role() {\n      return store.getters['auth/getLoggedIn'];\n    },\n    store() {\n      return store;\n    },\n    avatarUrl() {\n      return getImageUrl(this.service.author.avatar);\n    },\n    infos() {\n      return [{\n        title: 'Место',\n        value: this.service.places\n      }, {\n        title: 'Языки',\n        value: 'Русский'\n      }, {\n        title: 'Категория',\n        value: this.service.category.label\n      }, {\n        title: 'Длительность',\n        value: this.service.duration\n      }, {\n        title: 'Последнее изменение',\n        value: dateToString(this.service.updatedAt)\n      }, {\n        title: 'Дата создания',\n        value: dateToString(this.service.createdAt)\n      }];\n    }\n  },\n  methods: {\n    stringToDate: dateToString,\n    async setCreatorId() {\n      this.creatorId = await getCreatorId(this.serviceId);\n    },\n    async fetchServiceById() {\n      this.service = await getServiceByIdApi(this.serviceId);\n      this.isLoaded = true;\n    },\n    async deleteService() {\n      try {\n        await deleteServiceApi(this.serviceId);\n        this.$router.push('/profile');\n      } catch (err) {\n        alert('Не удалось удалить услугу.');\n        this.$router.push('/services/' + this.serviceId);\n        console.log(err);\n      }\n    },\n    async fetchFreeWindows() {\n      this.freeWindows = await getFreeWindowsApi(this.serviceId);\n    },\n    async fetchCurrentEntries() {\n      this.currentEntries = await getCurrentEntriesApi(this.serviceId);\n    },\n    async changeTab(tab) {\n      this.selectedTab = tab;\n      if (tab.name === 'freeWindows') {\n        await this.fetchFreeWindows();\n      }\n      if (tab.name === 'currentEntries') {\n        await this.fetchCurrentEntries();\n      }\n    },\n    async createPlan() {\n      // const payload = {\n      //   idProduct: this.serviceId,\n      //   dayTime: this.planDate + 'T' + this.planTime + ':00+07:00'\n      // }\n      const [year, month, day] = this.planDate.split('-');\n      const [hours, minutes] = this.planTime.split(':');\n      const payload = {\n        idProduct: Number(this.serviceId),\n        year: String(year),\n        month: String(month),\n        day: String(day),\n        hours: String(hours),\n        minutes: String(minutes)\n      };\n      console.log(payload);\n      try {\n        await createPlanApi(payload);\n        this.dialogVisibleCreate = false;\n        await this.fetchFreeWindows();\n        this.planTime = '';\n        this.planDate = '';\n      } catch (err) {\n        alert('Не удалось добавить окно.');\n        console.log(err);\n      }\n    },\n    async signPlanUp() {\n      if (store.getters['auth/getLoggedIn']) {\n        try {\n          await signUpPlanApi(this.selectedWindowId);\n          await router.push('/records');\n        } catch (err) {\n          console.log(err);\n          alert('Не удалось записаться на услугу');\n        }\n      } else await router.push('/login');\n    },\n    async removePlan(plan) {\n      console.log('deleting');\n      try {\n        await deletePlanApi(plan.id);\n        await this.fetchFreeWindows();\n      } catch (err) {\n        console.log(err);\n        alert('Не удалось удалить запись');\n      }\n    },\n    async openUpdateDialog(plan) {\n      this.dialogVisibleEdit = true;\n      this.editForm.planDateNew = plan;\n      this.editForm.planTimeNew = plan;\n      this.editForm.editedPlan = plan;\n\n      // const data = await getFreeWindowsApi(this.serviceId)\n      // const currentPlan = data.filter((item) => {\n      //   return (item.record.id === plan.record.id)\n      // })\n      // console.log(...currentPlan)\n    },\n\n    async updatePlan() {\n      console.log('updating');\n      const [year, month, day] = this.editForm.planDateNew.split('-');\n      const [hours, minutes] = this.editForm.planTimeNew.split(':');\n      const payload = {\n        year: String(year),\n        month: String(month),\n        day: String(day),\n        hours: String(hours),\n        minutes: String(minutes)\n      };\n      try {\n        await updatePlanApi(Number(this.editForm.editedPlan.id), payload);\n        this.dialogVisibleEdit = false;\n        this.editForm.planTimeNew = '';\n        this.editForm.planDateNew = '';\n        await this.fetchCurrentEntries();\n        await this.fetchFreeWindows();\n      } catch (err) {\n        console.log(err);\n        alert('Не удалось изменить запись');\n      }\n    }\n  }\n};","map":{"version":3,"names":["deleteServiceApi","getServiceByIdApi","store","AppImage","getImageUrl","AppRadio","AppPrimaryBtn","getCreatorId","AppTabs","createPlanApi","deletePlanApi","getCurrentEntriesApi","getFreeWindowsApi","signUpPlanApi","updatePlanApi","AppDialog","AppForm","InputRows","AppDatePicker","AppTimePicker","currentDate","currentTime","roundTime","PlanList","router","AppRedBtn","dateToString","components","data","service","image","String","createdAt","Date","updatedAt","places","category","Object","duration","title","cost","description","author","name","avatar","isLoaded","selectedWindowId","creatorId","planTabs","label","selectedTab","freeWindows","currentEntries","planDate","planTime","dialogVisibleCreate","dialogVisibleEdit","editForm","planDateNew","planTimeNew","editedPlan","mounted","fetchServiceById","console","log","setCreatorId","fetchFreeWindows","computed","currentRoundedTime","serviceId","Number","$route","params","id","hasAllRights","getters","role","avatarUrl","infos","value","methods","stringToDate","deleteService","$router","push","err","alert","fetchCurrentEntries","changeTab","tab","createPlan","year","month","day","split","hours","minutes","payload","idProduct","signPlanUp","removePlan","plan","openUpdateDialog","updatePlan"],"sources":["C:\\Users\\SAK\\Desktop\\Обмен услуг\\frontend\\src\\pages\\services\\ServiceByIdPage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n\n    <section class=\"content-block\">\n      <div class=\"user-avatar\">\n        <AppImage class=\"user-avatar\"\n                  :src=\"avatarUrl\"></AppImage>\n      </div>\n      <div class=\"user-group__text\">\n        <div class=\"user-group__text__level\">\n          <h3>{{ service.author.name }}</h3>\n          <p>{{ service.author.email }}</p>\n        </div>\n        <div class=\"user-group__text__level\">\n          <h2>{{ service.title }}</h2>\n        </div>\n        <div class=\"user-group__text__level\">\n          <p>{{ service.description }}</p>\n        </div>\n        <div class=\"user-group__text__level\">\n          <p class=\"service-cost\">{{ service.cost }}₽</p>\n        </div>\n        <div class=\"user-group__text__level\" v-if=\"hasAllRights\">\n          <AppPrimaryBtn\n            @click=\"this.$router.push('/services/' + service.id  + '/edit')\"\n            style=\"width: 180px; margin-top: 15px;\">\n            Редактировать\n          </AppPrimaryBtn>\n          <AppRedBtn\n            @click=\"deleteService\"\n            style=\"width: 180px;\">\n            Удалить\n          </AppRedBtn>\n        </div>\n      </div>\n    </section>\n\n    <!--  Для других юзеров -->\n    <section class=\"content-block details-block\"\n             v-if=\"!hasAllRights\">\n      <div v-for=\"info in this.infos\" :key=\"info\" class=\"details__item\">\n        <p>{{ info.title }}</p>\n        <h3>{{ info.value  }}</h3>\n      </div>\n    </section>\n\n    <!--  Запись  -->\n    <section class=\"content-block windows-block\"\n             v-if=\"!hasAllRights\">\n      <h2 style=\"margin-bottom: 30px;\">Свободные окна</h2>\n      <div class=\"windows__items\" v-if=\"freeWindows.length > 0\">\n        <app-radio v-for=\"window in freeWindows\"\n                   :key=\"window.id\"\n                   :label=\"stringToDate(window.datetime)\"\n                   :value=\"String(window.id)\"\n                   v-model=\"selectedWindowId\">\n        </app-radio>\n      </div>\n      <p v-else>Пока что нет свободных окон для записи.</p>\n      <AppPrimaryBtn @click=\"signPlanUp\"\n                     v-if=\"freeWindows.length > 0\"\n                     style=\"width: fit-content; margin-top: 30px; margin-left: auto;\"\n                     :disabled=\"!selectedWindowId\"\n                     :class=\"{ disabled: !selectedWindowId }\"\n      >Записаться</AppPrimaryBtn>\n    </section>\n\n    <!--    Для админа и креатора-->\n    <section class=\"content-block details-windows-block-for-creator\"\n             v-if=\"hasAllRights\">\n\n      <div class=\"details-block\">\n        <div v-for=\"info in this.infos\" :key=\"info\" class=\"details__item\">\n          <p>{{ info.title }}</p>\n          <h3>{{ info.value  }}</h3>\n        </div>\n      </div>\n\n      <div class=\"windows-block\">\n        <div class=\"windows-block__header\">\n          <AppTabs :names=\"planTabs\"\n                   :selectedTab=\"selectedTab\"\n                   @changeTab=\"changeTab\"\n                   class=\"tab-nav\"/>\n        </div>\n\n        <div class=\"windows-block__tab-content\">\n          <div v-if=\"selectedTab.name === 'freeWindows' && store.getters['auth/getLoggedIn']\"\n               class=\"tab-content__free-windows\">\n            <div v-if=\"this.freeWindows.length > 0\">\n              <PlanList class=\"free-windows__list\" :plans=\"freeWindows\" @remove=\"removePlan\" @update=\"openUpdateDialog\"/>\n            </div>\n            <p style=\"text-align: center\" v-else>Нет сеансов.</p>\n            <div class=\"tab-content__footer\">\n              <h4 @click=\"dialogVisibleCreate = true\">+ Добавить окно</h4>\n            </div>\n          </div>\n\n          <div v-if=\"selectedTab.name === 'currentEntries'\" class=\"tab-content__current-entries\">\n            <div v-if=\"this.currentEntries.length > 0\">\n              <PlanList class=\"current-entries__list\" :plans=\"currentEntries\" :can-be-deleted=\"false\" @update=\"openUpdateDialog\"/>\n            </div>\n            <p style=\"text-align: center\" v-else>Нет записавшихся клиентов.</p>\n            <div class=\"tab-content__footer\">\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </section>\n\n<!--    Добавление окна -->\n    <AppDialog v-model:show=\"dialogVisibleCreate\">\n      <AppForm @submit=\"createPlan\" style=\"width: 400px;\">\n        <h2 style=\"margin-bottom: 30px;\">Добавить окно</h2>\n        <InputRows>\n          <div class=\"input-row\">\n            <span>Дата</span>\n            <AppDatePicker v-model=\"planDate\"\n                           :minDate=\"String(this.currentDate)\"\n                           :name=\"`date`\"\n            ></AppDatePicker>\n          </div>\n          <div class=\"input-row\">\n            <span>Время</span>\n            <AppTimePicker v-model=\"planTime\"\n                           :name=\"`time`\"\n                           style=\"margin-left: auto;\"></AppTimePicker>\n          </div>\n        </InputRows>\n        <div class=\"form__btns\" style=\"margin-top: 30px;\">\n          <AppPrimaryBtn type=\"submit\">Отправить</AppPrimaryBtn>\n        </div>\n      </AppForm>\n    </AppDialog>\n\n    <AppDialog v-model:show=\"dialogVisibleEdit\">\n      <AppForm @submit=\"updatePlan\" style=\"width: 400px;\">\n        <h2 style=\"margin-bottom: 30px;\">Изменить запись</h2>\n        <InputRows>\n          <!--          <div class=\"input-row\">-->\n          <!--            <span>Дата</span>-->\n          <!--            <VueDatePicker v-model=\"planDate\" locale=\"ru\"></VueDatePicker>-->\n          <!--          </div>-->\n\n          <div class=\"input-row\">\n            <span>Дата</span>\n            <AppDatePicker v-model=\"editForm.planDateNew\"\n                           :minDate=\"String(this.currentDate)\"\n                           :name=\"`date`\"\n            ></AppDatePicker>\n          </div>\n\n          <div class=\"input-row\">\n            <span>Время</span>\n            <AppTimePicker v-model=\"editForm.planTimeNew\"\n                           :name=\"`time`\"\n                           style=\"margin-left: auto;\"></AppTimePicker>\n          </div>\n\n        </InputRows>\n        <div class=\"form__btns\" style=\"margin-top: 30px;\">\n          <AppPrimaryBtn type=\"submit\">Отправить</AppPrimaryBtn>\n        </div>\n      </AppForm>\n    </AppDialog>\n  </div>\n</template>\n\n<script>\n\nimport { deleteServiceApi, getServiceByIdApi } from '@/services/services_service'\nimport store from '@/store'\nimport AppImage from '@/components/UI/AppImage.vue'\nimport { getImageUrl } from '@/hooks/imageUrl'\nimport AppRadio from '@/components/UI/AppRadio.vue'\nimport AppPrimaryBtn from '@/components/UI/AppPrimaryButton.vue'\nimport { getCreatorId } from '@/hooks/getServiceCreatorId'\nimport AppTabs from '@/components/UI/AppTabs.vue'\nimport {\n  createPlanApi,\n  deletePlanApi,\n  getCurrentEntriesApi,\n  getFreeWindowsApi,\n  signUpPlanApi,\n  updatePlanApi\n} from '@/services/plans_service'\nimport AppDialog from '@/components/UI/AppDialog.vue'\nimport AppForm from '@/components/AppForm.vue'\nimport InputRows from '@/components/UI/InputRows.vue'\n// import VueDatePicker from '@vuepic/vue-datepicker'\nimport '@vuepic/vue-datepicker/dist/main.css'\nimport AppDatePicker from '@/components/UI/AppDateInput.vue'\nimport AppTimePicker from '@/components/UI/AppTimeInput.vue'\nimport { currentDate } from '@/hooks/currentDate'\nimport { currentTime } from '@/hooks/currentTime'\nimport { roundTime } from '@/hooks/roundTime'\nimport PlanList from '@/components/plans/Planslist.vue'\nimport router from '@/router/router'\nimport AppRedBtn from '@/components/UI/AppRedButton.vue'\nimport { dateToString } from '../../hooks/dateToString'\n\nexport default {\n  components: { AppRedBtn, PlanList, AppTimePicker, AppDatePicker, InputRows, AppForm, AppDialog, AppTabs, AppPrimaryBtn, AppRadio, AppImage },\n  data () {\n    return {\n      service: {\n        image: String,\n        createdAt: Date,\n        updatedAt: Date,\n        places: String,\n        category: Object,\n        duration: String,\n        title: String,\n        cost: String,\n        description: String,\n        author: {\n          name: String,\n          avatar: String\n        }\n      },\n      isLoaded: false,\n      selectedWindowId: '',\n      creatorId: 0,\n      planTabs: [\n        { name: 'freeWindows', label: 'Свободные окна' },\n        { name: 'currentEntries', label: 'Текущие записи' }\n      ],\n      selectedTab: { name: 'freeWindows', label: 'Свободные окна' },\n      freeWindows: [],\n      currentEntries: [],\n      planDate: '',\n      planTime: '',\n      dialogVisibleCreate: false,\n      dialogVisibleEdit: false,\n      editForm: {\n        planDateNew: '',\n        planTimeNew: '',\n        editedPlan: ''\n      }\n    }\n  },\n  mounted () {\n    this.fetchServiceById()\n    console.log(this.service)\n    this.setCreatorId()\n    this.fetchFreeWindows()\n  },\n  computed: {\n    currentDate () {\n      return currentDate\n    },\n    currentRoundedTime () {\n      return roundTime(currentTime)\n    },\n    serviceId () {\n      return Number(this.$route.params.id)\n    },\n    hasAllRights () {\n      return store.getters['auth/getLoggedIn'] &&\n        (store.getters['auth/getUserProfile'].id === this.creatorId || store.getters['auth/getUserProfile'].role === 'Admin')\n    },\n    role () {\n      return store.getters['auth/getLoggedIn']\n    },\n    store () {\n      return store\n    },\n    avatarUrl () {\n      return getImageUrl(this.service.author.avatar)\n    },\n    infos () {\n      return [\n        { title: 'Место', value: this.service.places },\n        { title: 'Языки', value: 'Русский' },\n        { title: 'Категория', value: this.service.category.label },\n        { title: 'Длительность', value: this.service.duration },\n        { title: 'Последнее изменение', value: dateToString(this.service.updatedAt) },\n        { title: 'Дата создания', value: dateToString(this.service.createdAt) }\n      ]\n    }\n  },\n  methods: {\n    stringToDate: dateToString,\n    async setCreatorId () {\n      this.creatorId = await getCreatorId(this.serviceId)\n    },\n    async fetchServiceById () {\n      this.service = await getServiceByIdApi(this.serviceId)\n      this.isLoaded = true\n    },\n    async deleteService () {\n      try {\n        await deleteServiceApi(this.serviceId)\n        this.$router.push('/profile')\n      } catch (err) {\n        alert('Не удалось удалить услугу.')\n        this.$router.push('/services/' + this.serviceId)\n        console.log(err)\n      }\n    },\n    async fetchFreeWindows () {\n      this.freeWindows = await getFreeWindowsApi(this.serviceId)\n    },\n    async fetchCurrentEntries () {\n      this.currentEntries = await getCurrentEntriesApi(this.serviceId)\n    },\n    async changeTab (tab) {\n      this.selectedTab = tab\n      if (tab.name === 'freeWindows') {\n        await this.fetchFreeWindows()\n      }\n      if (tab.name === 'currentEntries') {\n        await this.fetchCurrentEntries()\n      }\n    },\n    async createPlan () {\n      // const payload = {\n      //   idProduct: this.serviceId,\n      //   dayTime: this.planDate + 'T' + this.planTime + ':00+07:00'\n      // }\n      const [year, month, day] = this.planDate.split('-')\n      const [hours, minutes] = this.planTime.split(':')\n\n      const payload = {\n        idProduct: Number(this.serviceId),\n        year: String(year),\n        month: String(month),\n        day: String(day),\n        hours: String(hours),\n        minutes: String(minutes)\n      }\n      console.log(payload)\n      try {\n        await createPlanApi(payload)\n        this.dialogVisibleCreate = false\n        await this.fetchFreeWindows()\n\n        this.planTime = ''\n        this.planDate = ''\n      } catch (err) {\n        alert('Не удалось добавить окно.')\n        console.log(err)\n      }\n    },\n    async signPlanUp () {\n      if (store.getters['auth/getLoggedIn']) {\n        try {\n          await signUpPlanApi(this.selectedWindowId)\n          await router.push('/records')\n        } catch (err) {\n          console.log(err)\n          alert('Не удалось записаться на услугу')\n        }\n      } else await router.push('/login')\n    },\n    async removePlan (plan) {\n      console.log('deleting')\n      try {\n        await deletePlanApi(plan.id)\n        await this.fetchFreeWindows()\n      } catch (err) {\n        console.log(err)\n        alert('Не удалось удалить запись')\n      }\n    },\n    async openUpdateDialog (plan) {\n      this.dialogVisibleEdit = true\n      this.editForm.planDateNew = plan\n      this.editForm.planTimeNew = plan\n      this.editForm.editedPlan = plan\n\n      // const data = await getFreeWindowsApi(this.serviceId)\n      // const currentPlan = data.filter((item) => {\n      //   return (item.record.id === plan.record.id)\n      // })\n      // console.log(...currentPlan)\n    },\n    async updatePlan () {\n      console.log('updating')\n      const [year, month, day] = this.editForm.planDateNew.split('-')\n      const [hours, minutes] = this.editForm.planTimeNew.split(':')\n      const payload = {\n        year: String(year),\n        month: String(month),\n        day: String(day),\n        hours: String(hours),\n        minutes: String(minutes)\n      }\n      try {\n        await updatePlanApi(Number(this.editForm.editedPlan.id), payload)\n        this.dialogVisibleEdit = false\n        this.editForm.planTimeNew = ''\n        this.editForm.planDateNew = ''\n        await this.fetchCurrentEntries()\n        await this.fetchFreeWindows()\n      } catch (err) {\n        console.log(err)\n        alert('Не удалось изменить запись')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"less\">\n.content-block {\n  display: flex;\n  //padding: 30px;\n  //box-shadow: @box-shadow;\n\n  &:not(:first-child) {\n    margin-top: 40px;\n  }\n}\n\n.user-group {\n  display: flex;\n  justify-content: space-between;\n}\n\n.user-avatar {\n  width: 80px;\n  height: 80px;\n  margin-right: 20px;\n}\n\np {\n  color: @non-active-color\n}\n\n.user-group__text {\n  > * {\n    margin-top: 6px;\n  }\n}\n\n.user-group__text__level {\n  display: flex;\n  align-items: end;\n\n  > * {\n    margin-right: 10px;\n  }\n}\n\n.service-cost {\n  padding: 8px;\n  max-width: 100%;\n  width: fit-content;\n  border-radius: @border-radius;\n  border: 2px solid @secondary-color;\n  background: rgba(133, 84, 216, 0.2);\n  font-weight: 700;\n  color: @secondary-color\n}\n\n.details-windows-block-for-creator {\n  height: max-content;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n  grid-row-gap: 20px;\n\n  .details-block {\n    height: 100%;\n    display: inline-block;\n    padding: 30px;\n    box-shadow: @box-shadow;\n    border-radius: @border-radius;\n\n    > *:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n}\n\n.details-block {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n  grid-row-gap: 20px;\n  padding: 30px;\n  box-shadow: @box-shadow;\n  border-radius: @border-radius;\n}\n\n.details__item {\n\n  > p {\n    margin-bottom: 4px;\n  }\n}\n\n.windows-block {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 30px;\n  box-shadow: @box-shadow;\n  border-radius: @border-radius;\n}\n\n.windows__items {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-column-gap: 20px;\n  grid-row-gap: 20px;\n}\n\n.windows-block__header {\n  button, .tab-nav {\n    width: 100%;\n  }\n}\n\n.windows-block__tab-content {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.tab-content__free-windows, .tab-content__current-entries {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n\n  p {\n    margin-top: 20px;\n  }\n}\n\n.free-windows__list, .current-entries__list{\n  margin-top: 30px;\n}\n\n.tab-content__footer {\n  margin-top: auto;\n  align-self: flex-end;\n  width: 100%;\n  * {\n    color: #8554D8;\n    cursor: pointer;\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n}\n\n.input-row {\n  display: grid;\n  grid-template-columns: 20% 1fr;\n  align-items: center;\n  gap: 10px;\n}\n\n.service-card__content__cost {\n  margin-top: auto;\n  padding: 8px;\n  max-width: 100%;\n  width: fit-content;\n  border-radius: @border-radius;\n  border: 2px solid @secondary-color;\n  background: rgba(133, 84, 216, 0.2);\n  font-weight: 700;\n\n  P {\n    color: @secondary-color;\n  }\n}\n\n.btns {\n  margin-top: 40px;\n  width: 300px;\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}